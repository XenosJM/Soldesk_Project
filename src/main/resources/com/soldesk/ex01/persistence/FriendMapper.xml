<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.soldesk.ex01.persistence.FriendMapper">

	<resultMap type="com.soldesk.ex01.domain.FriendVO"
		id="friendResultMap">
		<id property="friendshipId" column="FRIENDSHIP_ID" />
		<result property="memberId" column="MEMBER_ID" />
		<result property="friendMemberId" column="FRIEND_MEMBER_ID" />
		<result property="friendState" column="FRIEND_STATE" />
		<result property="friendshipDate" column="FRIENDSHIP_DATE" />
	</resultMap>
	
    <!-- 친구 추가 -->
    <insert id="insertFriend">
        INSERT INTO FRIEND (FRIENDSHIP_ID, MEMBER_ID, FRIEND_MEMBER_ID, FRIEND_STATE, FRIENDSHIP_DATE)
        VALUES (FRIENDSHIP_SEQ.NEXTVAL, #{memberId}, #{friendMemberId}, #{friendState}, SYSDATE)
    </insert>

    <!-- 특정 회원의 친구 목록 조회 -->
    <select id="friendList" resultMap="friendResultMap">
        SELECT * FROM FRIEND WHERE MEMBER_ID = #{memberId}
    </select>
	
	<!-- 스케쥴링으로 기준 시간이 지난 요청 삭제 -->
    <select id="allFriend" resultMap="friendResultMap">
        SELECT FRIENDSHIP_ID, FRIEND_STATE FROM FRIEND
    </select>
	
    <!-- 친구 상태 변경 -->
    <update id="friendStateChange">
	    UPDATE FRIEND 
	    SET FRIEND_STATE = #{friendState} 
	    WHERE FRIEND_MEMBER_ID = #{memberId}
	</update>

    <!-- 친구 삭제 -->
    <delete id="deleteFriend">
    	DELETE FROM FRIEND 
	    WHERE (MEMBER_ID = #{memberId} AND FRIEND_MEMBER_ID = #{friendMemberId})
	       OR (MEMBER_ID = #{friendMemberId} AND FRIEND_MEMBER_ID = #{memberId})
	</delete>
	
	
</mapper>
	